name: Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: '1.22'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run tests with coverage
        run: |
          go test -v -coverprofile=coverage.out -covermode=atomic ./...
          COVERAGE=$(go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "Coverage: $COVERAGE%"
      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
      - name: Create coverage badge
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ secrets.COVERAGE_GIST_ID }}
          filename: pivot-coverage.json
          label: Coverage
          message: ${{ env.COVERAGE }}%
          color: ${{ env.COVERAGE >= 80 && 'brightgreen' || env.COVERAGE >= 60 && 'yellow' || 'red' }}

  cli-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run CLI test suite
        run: |
          chmod +x ./scripts/test-cli.sh
          ./scripts/test-cli.sh

  security-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install security tools
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
      - name: Run security test suite
        run: make test-security
      - name: Parse security results
        if: always()
        run: |
          # Check if security report exists and parse results
          if [ -f "security-report.md" ]; then
            # Count critical/high issues from gosec report
            if [ -f "gosec-report.json" ]; then
              CRITICAL_ISSUES=$(jq -r '.Stats.files // 0' gosec-report.json 2>/dev/null || echo "0")
              HIGH_ISSUES=$(jq -r '.Issues | length' gosec-report.json 2>/dev/null || echo "0")
            else
              CRITICAL_ISSUES=0
              HIGH_ISSUES=0
            fi
            
            # Determine security rating
            TOTAL_ISSUES=$((CRITICAL_ISSUES + HIGH_ISSUES))
            if [ $TOTAL_ISSUES -eq 0 ]; then
              SECURITY_RATING="A"
              SECURITY_COLOR="brightgreen"
            elif [ $TOTAL_ISSUES -le 2 ]; then
              SECURITY_RATING="B"
              SECURITY_COLOR="green"
            elif [ $TOTAL_ISSUES -le 5 ]; then
              SECURITY_RATING="C"
              SECURITY_COLOR="yellow"
            else
              SECURITY_RATING="D"
              SECURITY_COLOR="red"
            fi
          else
            SECURITY_RATING="Unknown"
            SECURITY_COLOR="lightgrey"
          fi
          
          echo "SECURITY_RATING=$SECURITY_RATING" >> $GITHUB_ENV
          echo "SECURITY_COLOR=$SECURITY_COLOR" >> $GITHUB_ENV
          echo "Security Rating: $SECURITY_RATING"
      - name: Create security badge
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ secrets.SECURITY_GIST_ID }}
          filename: pivot-security.json
          label: Security
          message: ${{ env.SECURITY_RATING }}
          color: ${{ env.SECURITY_COLOR }}
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-report.md
            gosec-report.json
          retention-days: 30

  badges:
    runs-on: ubuntu-latest
    needs: [test, cli-tests, security-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Create build status badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ secrets.BADGES_GIST_ID }}
          filename: pivot-build.json
          label: Build
          message: ${{ needs.test.result == 'success' && needs.cli-tests.result == 'success' && needs.security-tests.result == 'success' && 'passing' || 'failing' }}
          color: ${{ needs.test.result == 'success' && needs.cli-tests.result == 'success' && needs.security-tests.result == 'success' && 'brightgreen' || 'red' }}
      
      - name: Get Go version from go.mod
        id: go-version
        run: |
          GO_VERSION=$(grep "^go " go.mod | cut -d' ' -f2)
          echo "version=$GO_VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Go version badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ secrets.BADGES_GIST_ID }}
          filename: pivot-go-version.json
          label: Go
          message: ${{ steps.go-version.outputs.version }}
          color: 00ADD8
      
      - name: Check license file
        id: license
        run: |
          if [ -f "LICENSE" ]; then
            # Try to detect license type from LICENSE file
            if grep -qi "MIT" LICENSE; then
              LICENSE_TYPE="MIT"
            elif grep -qi "Apache" LICENSE; then
              LICENSE_TYPE="Apache-2.0"
            elif grep -qi "BSD" LICENSE; then
              LICENSE_TYPE="BSD"
            elif grep -qi "GPL" LICENSE; then
              LICENSE_TYPE="GPL"
            else
              LICENSE_TYPE="Custom"
            fi
          else
            LICENSE_TYPE="None"
          fi
          echo "type=$LICENSE_TYPE" >> $GITHUB_OUTPUT
          echo "License detected: $LICENSE_TYPE"
      
      - name: Create license badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GITHUB_TOKEN }}
          gistID: ${{ secrets.BADGES_GIST_ID }}
          filename: pivot-license.json
          label: License
          message: ${{ steps.license.outputs.type }}
          color: ${{ steps.license.outputs.type == 'MIT' && 'yellow' || steps.license.outputs.type == 'Apache-2.0' && 'blue' || steps.license.outputs.type == 'BSD' && 'orange' || steps.license.outputs.type == 'GPL' && 'green' || 'lightgrey' }}

  build:
    needs: [test, cli-tests, security-tests]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: windows-latest
            goos: windows
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: arm64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Get version info
        id: version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git describe --tags --always --dirty)
          fi
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
      
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        shell: bash
        run: |
          BINARY_NAME=pivot
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.version }} -X main.commit=${{ steps.version.outputs.commit }} -X main.date=${{ steps.version.outputs.date }}" \
            -o "${BINARY_NAME}" \
            ./cmd/main.go
      
      - name: Archive binary
        uses: actions/upload-artifact@v4
        with:
          name: pivot-${{ matrix.goos }}-${{ matrix.goarch }}
          path: pivot${{ matrix.goos == 'windows' && '.exe' || '' }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p dist
          
          # Copy and rename binaries
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              artifact_name=$(basename "$dir")
              # Extract OS and ARCH from artifact name (pivot-linux-amd64)
              os_arch=${artifact_name#pivot-}
              
              # Find the binary in the artifact directory
              if [ -f "$dir/pivot" ]; then
                cp "$dir/pivot" "dist/pivot-$os_arch"
              elif [ -f "$dir/pivot.exe" ]; then
                cp "$dir/pivot.exe" "dist/pivot-$os_arch.exe"
              fi
            fi
          done
          
          # Create checksums
          cd dist
          sha256sum * > checksums.txt
          cd ..
      
      - name: Create DEB package
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir -p deb/pivot_${VERSION}_amd64/DEBIAN
          mkdir -p deb/pivot_${VERSION}_amd64/usr/local/bin
          
          # Copy binary
          cp dist/pivot-linux-amd64 deb/pivot_${VERSION}_amd64/usr/local/bin/pivot
          chmod +x deb/pivot_${VERSION}_amd64/usr/local/bin/pivot
          
          # Create control file
          cat > deb/pivot_${VERSION}_amd64/DEBIAN/control << EOF
          Package: pivot
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Ryan <ryan@example.com>
          Description: GitHub Issues Management CLI
           Pivot is a CLI tool for managing GitHub issues locally with offline sync capabilities.
          EOF
          
          # Build DEB package
          dpkg-deb --build deb/pivot_${VERSION}_amd64
          mv deb/pivot_${VERSION}_amd64.deb dist/
      
      - name: Create RPM spec and package
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Install rpm tools
          sudo apt-get update
          sudo apt-get install -y rpm
          
          # Create RPM build structure
          mkdir -p rpm/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          mkdir -p rpm/SOURCES/pivot-${VERSION}/usr/local/bin
          
          # Copy binary
          cp dist/pivot-linux-amd64 rpm/SOURCES/pivot-${VERSION}/usr/local/bin/pivot
          chmod +x rpm/SOURCES/pivot-${VERSION}/usr/local/bin/pivot
          
          # Create tarball
          cd rpm/SOURCES
          tar czf pivot-${VERSION}.tar.gz pivot-${VERSION}/
          cd ../..
          
          # Create spec file
          cat > rpm/SPECS/pivot.spec << EOF
          Name:           pivot
          Version:        ${VERSION}
          Release:        1%{?dist}
          Summary:        GitHub Issues Management CLI
          License:        MIT
          URL:            https://github.com/rhino11/pivot
          Source0:        %{name}-%{version}.tar.gz
          BuildArch:      x86_64
          
          %description
          Pivot is a CLI tool for managing GitHub issues locally with offline sync capabilities.
          
          %prep
          %setup -q
          
          %install
          mkdir -p %{buildroot}/usr/local/bin
          cp usr/local/bin/pivot %{buildroot}/usr/local/bin/
          
          %files
          /usr/local/bin/pivot
          
          %changelog
          * $(date +'%a %b %d %Y') Ryan <ryan@example.com> - ${VERSION}-1
          - Initial package
          EOF
          
          # Build RPM
          rpmbuild --define "_topdir $(pwd)/rpm" -ba rpm/SPECS/pivot.spec
          cp rpm/RPMS/x86_64/pivot-${VERSION}-1.*.rpm dist/
      
      - name: Create Homebrew formula
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Calculate SHA256 for macOS binaries
          SHA256_AMD64=$(sha256sum dist/pivot-darwin-amd64 | cut -d' ' -f1)
          SHA256_ARM64=$(sha256sum dist/pivot-darwin-arm64 | cut -d' ' -f1)
          
          mkdir -p homebrew
          cat > homebrew/pivot.rb << EOF
          class Pivot < Formula
            desc "GitHub Issues Management CLI"
            homepage "https://github.com/rhino11/pivot"
            version "${VERSION}"
            
            if Hardware::CPU.arm?
              url "https://github.com/rhino11/pivot/releases/download/v${VERSION}/pivot-darwin-arm64"
              sha256 "${SHA256_ARM64}"
            else
              url "https://github.com/rhino11/pivot/releases/download/v${VERSION}/pivot-darwin-amd64"
              sha256 "${SHA256_AMD64}"
            end
            
            def install
              bin.install Dir["pivot-darwin-*"].first => "pivot"
            end
            
            test do
              assert_match "pivot", shell_output("#{bin}/pivot version")
            end
          end
          EOF
      
      - name: Update Homebrew tap
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Calculate SHA256 for macOS binaries
          SHA256_AMD64=$(sha256sum dist/pivot-darwin-amd64 | cut -d' ' -f1)
          SHA256_ARM64=$(sha256sum dist/pivot-darwin-arm64 | cut -d' ' -f1)
          
          echo "📊 Release Information:"
          echo "   Version: v${VERSION}"
          echo "   AMD64 SHA256: ${SHA256_AMD64}"
          echo "   ARM64 SHA256: ${SHA256_ARM64}"
          echo
          
          # Check if homebrew-tap repository exists
          if curl -s -f -I "https://github.com/rhino11/homebrew-tap" >/dev/null 2>&1; then
            echo "🍺 Homebrew tap repository exists, attempting automatic update..."
            
            # Try to trigger the workflow dispatch using PAT if available, fallback to GITHUB_TOKEN
            AUTH_TOKEN="${{ secrets.HOMEBREW_PAT || secrets.GITHUB_TOKEN }}"
            
            # Trigger the workflow dispatch in the homebrew-tap repository
            RESPONSE=$(curl -s -w "%{http_code}" -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${AUTH_TOKEN}" \
              https://api.github.com/repos/rhino11/homebrew-tap/dispatches \
              -d "{\"event_type\":\"update-formula\",\"client_payload\":{\"version\":\"v${VERSION}\",\"sha256_amd64\":\"${SHA256_AMD64}\",\"sha256_arm64\":\"${SHA256_ARM64}\"}}")
            
            HTTP_CODE="${RESPONSE: -3}"
            if [ "$HTTP_CODE" = "204" ]; then
              echo "✅ Successfully triggered homebrew-tap update workflow"
            elif [ "$HTTP_CODE" = "401" ] || [ "$HTTP_CODE" = "403" ]; then
              echo "⚠️  Authentication failed (${HTTP_CODE}). The GITHUB_TOKEN doesn't have permission to trigger workflows in other repositories."
              echo "💡 To enable automatic homebrew-tap updates, add a HOMEBREW_PAT secret with 'repo' and 'workflow' permissions."
              echo "📝 Manual update required - run: ./scripts/update-homebrew-tap.sh v${VERSION} ${SHA256_AMD64} ${SHA256_ARM64}"
            else
              echo "❌ Failed to trigger homebrew update (HTTP ${HTTP_CODE}): ${RESPONSE%???}"
              echo "📝 Manual update required - run: ./scripts/update-homebrew-tap.sh v${VERSION} ${SHA256_AMD64} ${SHA256_ARM64}"
            fi
          else
            echo "❌ Homebrew tap repository doesn't exist yet."
            echo "🚀 Run scripts/setup-homebrew-tap.sh to set it up."
          fi
      
      - name: Create Chocolatey package
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          
          mkdir -p chocolatey/{tools,pivot}
          
          # Create nuspec file
          cat > chocolatey/pivot/pivot.nuspec << EOF
          <?xml version="1.0" encoding="utf-8"?>
          <package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
            <metadata>
              <id>pivot</id>
              <version>${VERSION}</version>
              <title>Pivot CLI</title>
              <authors>Ryan</authors>
              <projectUrl>https://github.com/rhino11/pivot</projectUrl>
              <description>GitHub Issues Management CLI</description>
              <summary>Pivot is a CLI tool for managing GitHub issues locally with offline sync capabilities.</summary>
              <tags>cli github issues management</tags>
              <licenseUrl>https://github.com/rhino11/pivot/blob/main/LICENSE</licenseUrl>
              <requireLicenseAcceptance>false</requireLicenseAcceptance>
            </metadata>
          </package>
          EOF
          
          # Create install script
          cat > chocolatey/tools/chocolateyinstall.ps1 << 'EOF'
          \$packageName = 'pivot'
          \$url64 = 'https://github.com/rhino11/pivot/releases/download/v${VERSION}/pivot-windows-amd64.exe'
          \$checksum64 = '$(sha256sum dist/pivot-windows-amd64.exe | cut -d' ' -f1)'
          
          Install-ChocolateyPackage \$packageName 'exe' '/S' \$url64 -checksum64 \$checksum64 -checksumType64 'sha256'
          EOF
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            homebrew/pivot.rb
          body: |
            ## Installation
            
            ### Homebrew (macOS)
            ```bash
            brew install rhino11/tap/pivot
            ```
            
            ### APT (Ubuntu/Debian)
            ```bash
            wget https://github.com/rhino11/pivot/releases/download/${{ github.ref_name }}/pivot_${{ github.ref_name }}_amd64.deb
            sudo dpkg -i pivot_${{ github.ref_name }}_amd64.deb
            ```
            
            ### YUM/DNF (RHEL/Fedora/CentOS)
            ```bash
            wget https://github.com/rhino11/pivot/releases/download/${{ github.ref_name }}/pivot-${{ github.ref_name }}-1.x86_64.rpm
            sudo rpm -i pivot-${{ github.ref_name }}-1.x86_64.rpm
            ```
            
            ### Chocolatey (Windows)
            ```powershell
            choco install pivot
            ```
            
            ### Manual Installation
            Download the appropriate binary for your platform from the assets below and place it in your PATH.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  e2e-homebrew-macos:
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Wait for release to be available
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Waiting for release $VERSION to be available..."
          
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Checking release..."
            
            if curl -s -f "https://api.github.com/repos/rhino11/pivot/releases/tags/$VERSION" >/dev/null; then
              echo "✅ Release is available"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Release not available after $max_attempts attempts"
              exit 1
            fi
            
            sleep 30
            ((attempt++))
          done
      
      - name: Run Homebrew E2E Test
        env:
          TEST_VERSION: ${{ github.ref_name }}
        run: |
          chmod +x ./test/e2e/homebrew-macos-e2e.sh
          ./test/e2e/homebrew-macos-e2e.sh $TEST_VERSION
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: homebrew-e2e-results
          path: |
            /tmp/homebrew-e2e-*.log
          retention-days: 7

  post-release-validation:
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
          
      - name: Wait for release to be available
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Waiting for release $VERSION to be available..."
          
          max_attempts=20
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Checking release availability..."
            
            if curl -s -f "https://api.github.com/repos/rhino11/pivot/releases/tags/$VERSION" >/dev/null; then
              echo "✅ Release is available"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Release not available after $max_attempts attempts"
              exit 1
            fi
            
            sleep 30
            ((attempt++))
          done
      
      - name: Run post-release validation
        env:
          TEST_VERSION: ${{ github.ref_name }}
        run: |
          chmod +x ./scripts/post-release-validation.sh
          ./scripts/post-release-validation.sh $TEST_VERSION
      
      - name: Upload validation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post-release-validation-reports
          path: |
            binary-validation-report.md
            checksums.txt
          retention-days: 30

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}